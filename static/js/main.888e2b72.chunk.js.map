{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","actions.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","user","index","Card","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","fetch","then","response","json","users","payload","catch","connect","searchField","searchRobots","isPending","onSearchChange","event","text","target","value","onRequestRobots","useDispatch","useEffect","filterRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.888e2b72.chunk.js","sourcesContent":["import React from 'react'\n\nconst card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src ={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default card","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n            robots.map((user, index) => {\n                return (\n                    <Card\n                    key={robots[index].id}\n                    id={robots[index].id}\n                    name={robots[index].name}\n                    email={robots[index].email}\n                    />\n                );\n            })\n            }\n    </div>\n    );\n};\n\nexport default CardList","import React from \"react\";\n\nconst Searchbox = ({ searchfield, searchChange }) => {\n    return (\n        <div className = 'pa2'>\n            <input\n            className = 'pa3 ba b--green bg-lightest-blue'\n            type = 'search'\n            placeholder = 'Search Robots'\n            onChange = {searchChange}\n            />\n        </div>\n    )\n}\n\nexport default Searchbox","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops! That isn't good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","import React, { useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux'\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { requestRobots, setSearchField } from '../actions'\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots)\n    }\n}\n\nfunction App(props) {\n    const dispatch = useDispatch();\n    const { searchField, onSearchChange, robots, isPending, onRequestRobots } = props;\n\n    useEffect(() => {dispatch(onRequestRobots())}, [dispatch]);\n\n    const filterRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ? \n        <h1>Loading</h1> : (\n        <div className = 'tc'>\n            <h1 className= 'f-subheadline ma2 pt3'>RoboFriends</h1>\n            <Searchbox searchChange={onSearchChange}/>\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList robots={filterRobots}/>\n                </ErrorBoundry>\n            </Scroll>\n        </div>\n    )\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload};\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false}\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false}\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ requestRobots, searchRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}